{"version":3,"sources":["components/UI/Card.js","components/Ingredients/IngredientForm.js","components/Ingredients/IngredientList.js","components/Ingredients/Ingredients.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","children","IngredientForm","React","memo","useState","inputTitle","setInputTitle","onSubmit","event","preventDefault","onAddIngredient","title","status","edit","type","id","value","onChange","target","IngredientList","titleStyle","color","ingredients","map","ig","index","changed","trim","placeholder","onClick","showInput","style","isComplete","alt","src","onRemoveItem","Ingredients","setIngredients","ingredient","prevIngredients","Math","random","toString","newEdit","updateIngredients","filter","console","log","newStatus","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b1ec8043.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return <div className=\"card\">{props.children}</div>;\n};\n\nexport default Card;\n","import React, { useState } from \"react\";\n\nimport Card from \"../UI/Card\";\nimport \"./IngredientForm.css\";\n\nconst IngredientForm = React.memo((props) => {\n  const [inputTitle, setInputTitle] = useState(\"\");\n  const submitHandler = (event) => {\n    event.preventDefault();\n    props.onAddIngredient({ title: inputTitle, status: false, edit: false });\n  };\n  return (\n    <section className=\"ingredient-form\">\n      <Card>\n        <form className=\"input-form\" onSubmit={submitHandler}>\n          <div className=\"form-control\">\n            <input\n              type=\"text\"\n              id=\"title\"\n              value={inputTitle}\n              onChange={(event) => setInputTitle(event.target.value)}\n            />\n          </div>\n          <div className=\"ingredient-form__actions\">\n            <button type=\"submit\">Add task</button>\n          </div>\n        </form>\n      </Card>\n    </section>\n  );\n});\n\nexport default IngredientForm;\n","import React from \"react\";\n\nimport \"./IngredientList.css\";\n\nconst IngredientList = (props) => {\n  const titleStyle = {\n    color: 'blue'\n  }\n  return (\n    <section className=\"ingredient-list\">\n      <ul>\n        {props.ingredients.map((ig, index) => (\n          <li key={ig.id}>\n            {!ig.edit ? (\n              <span style={ig.status ? titleStyle : null} onClick={() => props.showInput(index)}>{ig.title}</span>\n            ) : (\n              <div className=\"form-change\">\n                <input\n                  className=\"form-input\"\n                  type=\"text\"\n                  onChange={(event) => props.changed(event.target.value.trim(), index)}\n                  placeholder={ig.title}\n                ></input>\n                <span \n                className=\"form-button\"\n                onClick={() => props.showInput(index)}>Save</span>\n              </div>\n            )}\n            {ig.status ? (\n              <span\n                className=\"status-button\"\n                onClick={() => props.isComplete(index)}\n              >\n                <img\n                  alt=\"change status\"\n                  src=\"https://img.icons8.com/office/20/000000/checkmark--v1.png\"\n                />\n              </span>\n            ) : (\n              <span\n                onClick={() => props.isComplete(index)}\n                className=\"status-button\"\n              >\n                <img\n                  alt=\"change status\"\n                  src=\"https://img.icons8.com/android/20/000000/clock.png\"\n                />\n              </span>\n            )}\n            <span\n              className=\"delete-button\"\n              onClick={() => props.onRemoveItem(ig.id)}\n            >\n              <img\n                alt=\"Delete\"\n                src=\"https://img.icons8.com/ios-filled/20/000000/delete-sign--v1.png\"\n              />\n            </span>\n          </li>\n        ))}\n      </ul>\n    </section>\n  );\n};\n\nexport default IngredientList;\n","import React, { useState } from \"react\";\n\nimport IngredientForm from \"./IngredientForm\";\nimport IngredientList from \"./IngredientList\";\nimport \"./Ingredient.css\";\n\nfunction Ingredients() {\n  const [ingredients, setIngredients] = useState([]);\n  const addIngredientHandler = (ingredient) => {\n    setIngredients((prevIngredients) => [\n      { id: Math.random().toString(), ...ingredient },\n      ...prevIngredients\n    ]);\n  };\n  const addStatusHandler = (index) => {\n    const newStatus = ingredients[index].status;\n    const updateIngredients = [...ingredients];\n    updateIngredients[index].status = !newStatus;\n    setIngredients(updateIngredients);\n  };\n  const showInputHandle = (index) => {\n    const newEdit = ingredients[index].edit;\n    const updateIngredients = [...ingredients];\n    updateIngredients[index].edit = !newEdit;\n    setIngredients(updateIngredients);\n  };\n\n  const removeIngredientHandler = (id) => {\n    setIngredients((prevIngredients) =>\n      prevIngredients.filter((ingredient) => ingredient.id !== id)\n    );\n    console.log(ingredients);\n  };\n\n  const changedTitleHandler = (title, index) => {\n    const updateIngredients = [...ingredients];\n    title ? updateIngredients[index].title = title : updateIngredients[index].title = ingredients[index].title;\n    setIngredients(updateIngredients);\n  };\n  return (\n    <div className=\"App\">\n      <h1 className=\"App-title\">To do application</h1>\n      <IngredientForm onAddIngredient={addIngredientHandler} />\n      <section>\n        <IngredientList\n          showInput={showInputHandle}\n          ingredients={ingredients}\n          onRemoveItem={removeIngredientHandler}\n          isComplete={addStatusHandler}\n          changed={changedTitleHandler}\n        />\n      </section>\n    </div>\n  );\n}\n\nexport default Ingredients;\n","import React from 'react';\r\n\r\nimport Ingredients from './components/Ingredients/Ingredients';\r\n\r\nconst App = props => {\r\n  return <Ingredients />;\r\n};\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}